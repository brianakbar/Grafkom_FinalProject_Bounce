/**
 * Event System Subscriber interface. The interface contains event from {@link EVENT_SYSTEM_EVENT_NAMES}
 * and the function that will be called when the event is triggered.
 *
 * @interface EventSystemSubscriber
 */
export interface EventSystemSubscriber<E extends Record<string, (...args: Parameters<E[keyof E]>) => ReturnType<E[keyof E]>>, K extends keyof E> {
    event: K;
    handler: (...args: Parameters<E[K]>) => void;
}
/**
 * The buffer direction type. Defaults to "FIFO". If set to "LIFO", the buffer will
 * be filled from the end of the buffer. If set to "FIFO", the buffer will be
 * filled from the beginning of the buffer.
 *
 * @type {"FIFO" | "LIFO"}
 * @default "FIFO"
 */
export declare type EventSystemBufferDirection = 'FIFO' | 'LIFO';
/**
 * Event System init options type.
 *
 * @property {EventSystemBufferDirection} [bufferDirection="FIFO"] - The buffer direction.
 * @property {number} [bufferSize=3] - The buffer size.
 */
export declare type EventSystemOptions = {
    /**
     * The buffer direction.
     */
    bufferDirection?: EventSystemBufferDirection;
    /**
     * The buffer size.
     */
    bufferSize?: number;
};
/**
 * Event System class. The class is used to manage events and trigger their handlers.
 */
export default class EventSystem<E extends Record<string, (...args: Parameters<E[keyof E]>) => ReturnType<E[keyof E]>>> {
    /**
     * The Event System subscribers.
     * @type {EventSystemSubscriber<E, keyof E>[]}
     * @private
     */
    private subscribers;
    /**
     * The Event System buffer.
     * @type {Map<keyof E, CircularBuffer<Parameters<E[keyof E]>>>}
     * @private
     */
    private readonly buffer;
    /**
     * The Event System buffer direction.
     * @type {EventSystemBufferDirection}
     * @private
     */
    private readonly bufferDirection;
    /**
     * The Event System buffer size.
     * @type {number}
     * @private
     */
    private readonly bufferSize;
    /**
     * Event System constructor.
     * @param {EventSystemOptions} options
     * @private
     */
    constructor(options?: EventSystemOptions);
    /**
     * Subscribes handler to be called when the event is triggered.
     * @param {K extends keyof E & string} event The event name.
     * @param {(...args: Parameters<E[keyof E]>) => ReturnType<E[keyof E]>} handler The handler function.
     */
    subscribe<K extends keyof E & string>(event: K, handler: (...args: Parameters<E[K]>) => ReturnType<E[K]>): void;
    /**
     * Unsubscribes the handler from the event.
     * @param {K extends keyof E & string} event The event name.
     * @param {(...args: Parameters<E[keyof E]>) => ReturnType<E[keyof E]>} handler The handler function.
     */
    unsubscribe<K extends keyof E & string>(event: K, handler: (...args: Parameters<E[K]>) => ReturnType<E[K]>): void;
    /**
     * Triggers the event with the given arguments.
     * @param {K extends keyof E & string} event The event name.
     * @param {Parameters<EventSystemEvents[keyof E]>} args The arguments to pass to the handler.
     */
    notify<K extends keyof E & string>(event: K, ...args: Parameters<E[K]>): void;
}
